#include <gtest/gtest.h>
#include <cppasm.h>

extern std::string asmstr();

TEST(Instruction16, Type1)
{
#if 0
    imm8 value1 { 0xAA };
    imm16 value2 { 0xAABB };
    imm32 value3 { 0xAABBCCDD };
    m8 addr1 { RDX };
    m16 addr2 { RDX };
    m32 addr3 { RDX };
    m64 addr4 { RDX };

    TEST(AL, value1);
    EXPECT_EQ(asmstr(), "test $0xAA, %al");
    TEST(addr1, value1);
    EXPECT_EQ(asmstr(), "testb $0xAA, (%rdx)");
    TEST(AX, value2);
    EXPECT_EQ(asmstr(), "test $0xAABB, %ax");
    TEST(addr2, value2);
    EXPECT_EQ(asmstr(), "testw $0xAABB, (%rdx)");
    TEST(EAX, value3);
    EXPECT_EQ(asmstr(), "test $0xAABBCCDD, %eax");
    TEST(addr3, value3);
    EXPECT_EQ(asmstr(), "testl $0xAABBCCDD, (%rdx)");
    //instr(RAX, value3);
    //instr(addr4, value3);
    TEST(AL, AH);
    EXPECT_EQ(asmstr(), "test %ah, %al");
    TEST(addr1, AL);
    EXPECT_EQ(asmstr(), "test %al, (%rdx)");
    TEST(AX, BX);
    EXPECT_EQ(asmstr(), "test %bx, %ax");
    TEST(addr2, AX);
    EXPECT_EQ(asmstr(), "test %ax, (%rdx)");
    TEST(EAX, EBX);
    EXPECT_EQ(asmstr(), "test %ebx, %eax");
    TEST(addr3, EAX);
    EXPECT_EQ(asmstr(), "test %eax, (%rdx)");
    TEST(RAX, RBX);
    EXPECT_EQ(asmstr(), "test %rbx, %rax");
    TEST(addr4, RAX);
    EXPECT_EQ(asmstr(), "test %rax, (%rdx)");
#endif
}

TEST(Instruction16, Type2)
{
    imm8 value { 1 };
    m8 addr1 { RDX };
    m16 addr2 { RDX };
    m32 addr3 { RDX };
    m64 addr4 { RDX };

    SAL(AL, value);
    EXPECT_EQ(asmstr(), "sal $0x01, %al");
    SAL(addr1, value);
    EXPECT_EQ(asmstr(), "salb $0x01, (%rdx)");
    SAL(AL, CL);
    EXPECT_EQ(asmstr(), "sal %cl, %al");
    SAL(addr1, CL);
    EXPECT_EQ(asmstr(), "salb %cl, (%rdx)");
    SAL(AX, value);
    EXPECT_EQ(asmstr(), "sal $0x01, %ax");
    SAL(addr2, value);
    EXPECT_EQ(asmstr(), "salw $0x01, (%rdx)");
    SAL(AX, CL);
    EXPECT_EQ(asmstr(), "sal %cl, %ax");
    SAL(addr2, CL);
    EXPECT_EQ(asmstr(), "salw %cl, (%rdx)");
    SAL(EAX, value);
    EXPECT_EQ(asmstr(), "sal $0x01, %eax");
    SAL(addr3, value);
    EXPECT_EQ(asmstr(), "sall $0x01, (%rdx)");
    SAL(EAX, CL);
    EXPECT_EQ(asmstr(), "sal %cl, %eax");
    SAL(addr3, CL);
    EXPECT_EQ(asmstr(), "sall %cl, (%rdx)");
    SAL(RAX, value);
    EXPECT_EQ(asmstr(), "sal $0x01, %rax");
    SAL(addr4, value);
    EXPECT_EQ(asmstr(), "salq $0x01, (%rdx)");
    SAL(RAX, CL);
    EXPECT_EQ(asmstr(), "sal %cl, %rax");
    SAL(addr4, CL);
    EXPECT_EQ(asmstr(), "salq %cl, (%rdx)");

    SAR(AL, value);
    EXPECT_EQ(asmstr(), "sar $0x01, %al");
    SAR(addr1, value);
    EXPECT_EQ(asmstr(), "sarb $0x01, (%rdx)");
    SAR(AL, CL);
    EXPECT_EQ(asmstr(), "sar %cl, %al");
    SAR(addr1, CL);
    EXPECT_EQ(asmstr(), "sarb %cl, (%rdx)");
    SAR(AX, value);
    EXPECT_EQ(asmstr(), "sar $0x01, %ax");
    SAR(addr2, value);
    EXPECT_EQ(asmstr(), "sarw $0x01, (%rdx)");
    SAR(AX, CL);
    EXPECT_EQ(asmstr(), "sar %cl, %ax");
    SAR(addr2, CL);
    EXPECT_EQ(asmstr(), "sarw %cl, (%rdx)");
    SAR(EAX, value);
    EXPECT_EQ(asmstr(), "sar $0x01, %eax");
    SAR(addr3, value);
    EXPECT_EQ(asmstr(), "sarl $0x01, (%rdx)");
    SAR(EAX, CL);
    EXPECT_EQ(asmstr(), "sar %cl, %eax");
    SAR(addr3, CL);
    EXPECT_EQ(asmstr(), "sarl %cl, (%rdx)");
    SAR(RAX, value);
    EXPECT_EQ(asmstr(), "sar $0x01, %rax");
    SAR(addr4, value);
    EXPECT_EQ(asmstr(), "sarq $0x01, (%rdx)");
    SAR(RAX, CL);
    EXPECT_EQ(asmstr(), "sar %cl, %rax");
    SAR(addr4, CL);
    EXPECT_EQ(asmstr(), "sarq %cl, (%rdx)");

    SHL(AL, value);
    EXPECT_EQ(asmstr(), "shl $0x01, %al");
    SHL(addr1, value);
    EXPECT_EQ(asmstr(), "shlb $0x01, (%rdx)");
    SHL(AL, CL);
    EXPECT_EQ(asmstr(), "shl %cl, %al");
    SHL(addr1, CL);
    EXPECT_EQ(asmstr(), "shlb %cl, (%rdx)");
    SHL(AX, value);
    EXPECT_EQ(asmstr(), "shl $0x01, %ax");
    SHL(addr2, value);
    EXPECT_EQ(asmstr(), "shlw $0x01, (%rdx)");
    SHL(AX, CL);
    EXPECT_EQ(asmstr(), "shl %cl, %ax");
    SHL(addr2, CL);
    EXPECT_EQ(asmstr(), "shlw %cl, (%rdx)");
    SHL(EAX, value);
    EXPECT_EQ(asmstr(), "shl $0x01, %eax");
    SHL(addr3, value);
    EXPECT_EQ(asmstr(), "shll $0x01, (%rdx)");
    SHL(EAX, CL);
    EXPECT_EQ(asmstr(), "shl %cl, %eax");
    SHL(addr3, CL);
    EXPECT_EQ(asmstr(), "shll %cl, (%rdx)");
    SHL(RAX, value);
    EXPECT_EQ(asmstr(), "shl $0x01, %rax");
    SHL(addr4, value);
    EXPECT_EQ(asmstr(), "shlq $0x01, (%rdx)");
    SHL(RAX, CL);
    EXPECT_EQ(asmstr(), "shl %cl, %rax");
    SHL(addr4, CL);
    EXPECT_EQ(asmstr(), "shlq %cl, (%rdx)");

    SHR(AL, value);
    EXPECT_EQ(asmstr(), "shr $0x01, %al");
    SHR(addr1, value);
    EXPECT_EQ(asmstr(), "shrb $0x01, (%rdx)");
    SHR(AL, CL);
    EXPECT_EQ(asmstr(), "shr %cl, %al");
    SHR(addr1, CL);
    EXPECT_EQ(asmstr(), "shrb %cl, (%rdx)");
    SHR(AX, value);
    EXPECT_EQ(asmstr(), "shr $0x01, %ax");
    SHR(addr2, value);
    EXPECT_EQ(asmstr(), "shrw $0x01, (%rdx)");
    SHR(AX, CL);
    EXPECT_EQ(asmstr(), "shr %cl, %ax");
    SHR(addr2, CL);
    EXPECT_EQ(asmstr(), "shrw %cl, (%rdx)");
    SHR(EAX, value);
    EXPECT_EQ(asmstr(), "shr $0x01, %eax");
    SHR(addr3, value);
    EXPECT_EQ(asmstr(), "shrl $0x01, (%rdx)");
    SHR(EAX, CL);
    EXPECT_EQ(asmstr(), "shr %cl, %eax");
    SHR(addr3, CL);
    EXPECT_EQ(asmstr(), "shrl %cl, (%rdx)");
    SHR(RAX, value);
    EXPECT_EQ(asmstr(), "shr $0x01, %rax");
    SHR(addr4, value);
    EXPECT_EQ(asmstr(), "shrq $0x01, (%rdx)");
    SHR(RAX, CL);
    EXPECT_EQ(asmstr(), "shr %cl, %rax");
    SHR(addr4, CL);
    EXPECT_EQ(asmstr(), "shrq %cl, (%rdx)");

    RCL(AL, value);
    EXPECT_EQ(asmstr(), "rcl $0x01, %al");
    RCL(addr1, value);
    EXPECT_EQ(asmstr(), "rclb $0x01, (%rdx)");
    RCL(AL, CL);
    EXPECT_EQ(asmstr(), "rcl %cl, %al");
    RCL(addr1, CL);
    EXPECT_EQ(asmstr(), "rclb %cl, (%rdx)");
    RCL(AX, value);
    EXPECT_EQ(asmstr(), "rcl $0x01, %ax");
    RCL(addr2, value);
    EXPECT_EQ(asmstr(), "rclw $0x01, (%rdx)");
    RCL(AX, CL);
    EXPECT_EQ(asmstr(), "rcl %cl, %ax");
    RCL(addr2, CL);
    EXPECT_EQ(asmstr(), "rclw %cl, (%rdx)");
    RCL(EAX, value);
    EXPECT_EQ(asmstr(), "rcl $0x01, %eax");
    RCL(addr3, value);
    EXPECT_EQ(asmstr(), "rcll $0x01, (%rdx)");
    RCL(EAX, CL);
    EXPECT_EQ(asmstr(), "rcl %cl, %eax");
    RCL(addr3, CL);
    EXPECT_EQ(asmstr(), "rcll %cl, (%rdx)");
    RCL(RAX, value);
    EXPECT_EQ(asmstr(), "rcl $0x01, %rax");
    RCL(addr4, value);
    EXPECT_EQ(asmstr(), "rclq $0x01, (%rdx)");
    RCL(RAX, CL);
    EXPECT_EQ(asmstr(), "rcl %cl, %rax");
    RCL(addr4, CL);
    EXPECT_EQ(asmstr(), "rclq %cl, (%rdx)");

    RCR(AL, value);
    EXPECT_EQ(asmstr(), "rcr $0x01, %al");
    RCR(addr1, value);
    EXPECT_EQ(asmstr(), "rcrb $0x01, (%rdx)");
    RCR(AL, CL);
    EXPECT_EQ(asmstr(), "rcr %cl, %al");
    RCR(addr1, CL);
    EXPECT_EQ(asmstr(), "rcrb %cl, (%rdx)");
    RCR(AX, value);
    EXPECT_EQ(asmstr(), "rcr $0x01, %ax");
    RCR(addr2, value);
    EXPECT_EQ(asmstr(), "rcrw $0x01, (%rdx)");
    RCR(AX, CL);
    EXPECT_EQ(asmstr(), "rcr %cl, %ax");
    RCR(addr2, CL);
    EXPECT_EQ(asmstr(), "rcrw %cl, (%rdx)");
    RCR(EAX, value);
    EXPECT_EQ(asmstr(), "rcr $0x01, %eax");
    RCR(addr3, value);
    EXPECT_EQ(asmstr(), "rcrl $0x01, (%rdx)");
    RCR(EAX, CL);
    EXPECT_EQ(asmstr(), "rcr %cl, %eax");
    RCR(addr3, CL);
    EXPECT_EQ(asmstr(), "rcrl %cl, (%rdx)");
    RCR(RAX, value);
    EXPECT_EQ(asmstr(), "rcr $0x01, %rax");
    RCR(addr4, value);
    EXPECT_EQ(asmstr(), "rcrq $0x01, (%rdx)");
    RCR(RAX, CL);
    EXPECT_EQ(asmstr(), "rcr %cl, %rax");
    RCR(addr4, CL);
    EXPECT_EQ(asmstr(), "rcrq %cl, (%rdx)");

    ROL(AL, value);
    EXPECT_EQ(asmstr(), "rol $0x01, %al");
    ROL(addr1, value);
    EXPECT_EQ(asmstr(), "rolb $0x01, (%rdx)");
    ROL(AL, CL);
    EXPECT_EQ(asmstr(), "rol %cl, %al");
    ROL(addr1, CL);
    EXPECT_EQ(asmstr(), "rolb %cl, (%rdx)");
    ROL(AX, value);
    EXPECT_EQ(asmstr(), "rol $0x01, %ax");
    ROL(addr2, value);
    EXPECT_EQ(asmstr(), "rolw $0x01, (%rdx)");
    ROL(AX, CL);
    EXPECT_EQ(asmstr(), "rol %cl, %ax");
    ROL(addr2, CL);
    EXPECT_EQ(asmstr(), "rolw %cl, (%rdx)");
    ROL(EAX, value);
    EXPECT_EQ(asmstr(), "rol $0x01, %eax");
    ROL(addr3, value);
    EXPECT_EQ(asmstr(), "roll $0x01, (%rdx)");
    ROL(EAX, CL);
    EXPECT_EQ(asmstr(), "rol %cl, %eax");
    ROL(addr3, CL);
    EXPECT_EQ(asmstr(), "roll %cl, (%rdx)");
    ROL(RAX, value);
    EXPECT_EQ(asmstr(), "rol $0x01, %rax");
    ROL(addr4, value);
    EXPECT_EQ(asmstr(), "rolq $0x01, (%rdx)");
    ROL(RAX, CL);
    EXPECT_EQ(asmstr(), "rol %cl, %rax");
    ROL(addr4, CL);
    EXPECT_EQ(asmstr(), "rolq %cl, (%rdx)");

    ROR(AL, value);
    EXPECT_EQ(asmstr(), "ror $0x01, %al");
    ROR(addr1, value);
    EXPECT_EQ(asmstr(), "rorb $0x01, (%rdx)");
    ROR(AL, CL);
    EXPECT_EQ(asmstr(), "ror %cl, %al");
    ROR(addr1, CL);
    EXPECT_EQ(asmstr(), "rorb %cl, (%rdx)");
    ROR(AX, value);
    EXPECT_EQ(asmstr(), "ror $0x01, %ax");
    ROR(addr2, value);
    EXPECT_EQ(asmstr(), "rorw $0x01, (%rdx)");
    ROR(AX, CL);
    EXPECT_EQ(asmstr(), "ror %cl, %ax");
    ROR(addr2, CL);
    EXPECT_EQ(asmstr(), "rorw %cl, (%rdx)");
    ROR(EAX, value);
    EXPECT_EQ(asmstr(), "ror $0x01, %eax");
    ROR(addr3, value);
    EXPECT_EQ(asmstr(), "rorl $0x01, (%rdx)");
    ROR(EAX, CL);
    EXPECT_EQ(asmstr(), "ror %cl, %eax");
    ROR(addr3, CL);
    EXPECT_EQ(asmstr(), "rorl %cl, (%rdx)");
    ROR(RAX, value);
    EXPECT_EQ(asmstr(), "ror $0x01, %rax");
    ROR(addr4, value);
    EXPECT_EQ(asmstr(), "rorq $0x01, (%rdx)");
    ROR(RAX, CL);
    EXPECT_EQ(asmstr(), "ror %cl, %rax");
    ROR(addr4, CL);
    EXPECT_EQ(asmstr(), "rorq %cl, (%rdx)");
}
