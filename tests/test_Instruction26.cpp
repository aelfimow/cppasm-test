#include <gtest/gtest.h>
#include <cppasm.h>

extern std::string asmstr();

TEST(Instruction26, Type1)
{
    imm8 value1 { 1 };
    imm16 value2 { 2 };
    imm32 value3 { 3 };
    m8 addr1 { RDX };
    m16 addr2 { RDX };
    m32 addr3 { RDX };
    m64 addr4 { RDX };

    ADD(AL, value1);
    EXPECT_EQ(asmstr(), "add $0x01, %al");
    ADD(addr1, value1);
    EXPECT_EQ(asmstr(), "addb $0x01, (%rdx)");
    ADD(AX, value2);
    EXPECT_EQ(asmstr(), "add $0x0002, %ax");
    ADD(addr2, value2);
    EXPECT_EQ(asmstr(), "addw $0x0002, (%rdx)");
    ADD(EAX, value3);
    EXPECT_EQ(asmstr(), "add $0x00000003, %eax");
    ADD(addr3, value3);
    EXPECT_EQ(asmstr(), "addl $0x00000003, (%rdx)");
    ADD(RAX, value3);
    EXPECT_EQ(asmstr(), "add $0x00000003, %rax");
    ADD(addr4, value3);
    EXPECT_EQ(asmstr(), "addq $0x00000003, (%rdx)");
    ADD(AX, value1);
    EXPECT_EQ(asmstr(), "add $0x01, %ax");
    ADD(addr2, value1);
    EXPECT_EQ(asmstr(), "addw $0x01, (%rdx)");
    ADD(EAX, value1);
    EXPECT_EQ(asmstr(), "add $0x01, %eax");
    ADD(addr3, value1);
    EXPECT_EQ(asmstr(), "addl $0x01, (%rdx)");
    ADD(RAX, value1);
    EXPECT_EQ(asmstr(), "add $0x01, %rax");
    ADD(addr4, value1);
    EXPECT_EQ(asmstr(), "addq $0x01, (%rdx)");
    ADD(AL, BL);
    EXPECT_EQ(asmstr(), "add %bl, %al");
    ADD(addr1, BL);
    EXPECT_EQ(asmstr(), "add %bl, (%rdx)");
    ADD(AX, BX);
    EXPECT_EQ(asmstr(), "add %bx, %ax");
    ADD(addr2, BX);
    EXPECT_EQ(asmstr(), "add %bx, (%rdx)");
    ADD(EAX, EBX);
    EXPECT_EQ(asmstr(), "add %ebx, %eax");
    ADD(addr3, EBX);
    EXPECT_EQ(asmstr(), "add %ebx, (%rdx)");
    ADD(RAX, RCX);
    EXPECT_EQ(asmstr(), "add %rcx, %rax");
    ADD(addr4, RCX);
    EXPECT_EQ(asmstr(), "add %rcx, (%rdx)");
    ADD(AL, addr1);
    EXPECT_EQ(asmstr(), "add (%rdx), %al");
    ADD(AX, addr2);
    EXPECT_EQ(asmstr(), "add (%rdx), %ax");
    ADD(EAX, addr3);
    EXPECT_EQ(asmstr(), "add (%rdx), %eax");
    ADD(RAX, addr4);
    EXPECT_EQ(asmstr(), "add (%rdx), %rax");

    ADC(AL, value1);
    EXPECT_EQ(asmstr(), "adc $0x01, %al");
    ADC(addr1, value1);
    EXPECT_EQ(asmstr(), "adcb $0x01, (%rdx)");
    ADC(AX, value2);
    EXPECT_EQ(asmstr(), "adc $0x0002, %ax");
    ADC(addr2, value2);
    EXPECT_EQ(asmstr(), "adcw $0x0002, (%rdx)");
    ADC(EAX, value3);
    EXPECT_EQ(asmstr(), "adc $0x00000003, %eax");
    ADC(addr3, value3);
    EXPECT_EQ(asmstr(), "adcl $0x00000003, (%rdx)");
    ADC(RAX, value3);
    EXPECT_EQ(asmstr(), "adc $0x00000003, %rax");
    ADC(addr4, value3);
    EXPECT_EQ(asmstr(), "adcq $0x00000003, (%rdx)");
    ADC(AX, value1);
    EXPECT_EQ(asmstr(), "adc $0x01, %ax");
    ADC(addr2, value1);
    EXPECT_EQ(asmstr(), "adcw $0x01, (%rdx)");
    ADC(EAX, value1);
    EXPECT_EQ(asmstr(), "adc $0x01, %eax");
    ADC(addr3, value1);
    EXPECT_EQ(asmstr(), "adcl $0x01, (%rdx)");
    ADC(RAX, value1);
    EXPECT_EQ(asmstr(), "adc $0x01, %rax");
    ADC(addr4, value1);
    EXPECT_EQ(asmstr(), "adcq $0x01, (%rdx)");
    ADC(AL, BL);
    EXPECT_EQ(asmstr(), "adc %bl, %al");
    ADC(addr1, BL);
    EXPECT_EQ(asmstr(), "adc %bl, (%rdx)");
    ADC(AX, BX);
    EXPECT_EQ(asmstr(), "adc %bx, %ax");
    ADC(addr2, BX);
    EXPECT_EQ(asmstr(), "adc %bx, (%rdx)");
    ADC(EAX, EBX);
    EXPECT_EQ(asmstr(), "adc %ebx, %eax");
    ADC(addr3, EBX);
    EXPECT_EQ(asmstr(), "adc %ebx, (%rdx)");
    ADC(RAX, RCX);
    EXPECT_EQ(asmstr(), "adc %rcx, %rax");
    ADC(addr4, RCX);
    EXPECT_EQ(asmstr(), "adc %rcx, (%rdx)");
    ADC(AL, addr1);
    EXPECT_EQ(asmstr(), "adc (%rdx), %al");
    ADC(AX, addr2);
    EXPECT_EQ(asmstr(), "adc (%rdx), %ax");
    ADC(EAX, addr3);
    EXPECT_EQ(asmstr(), "adc (%rdx), %eax");
    ADC(RAX, addr4);
    EXPECT_EQ(asmstr(), "adc (%rdx), %rax");

    SUB(AL, value1);
    EXPECT_EQ(asmstr(), "sub $0x01, %al");
    SUB(addr1, value1);
    EXPECT_EQ(asmstr(), "subb $0x01, (%rdx)");
    SUB(AX, value2);
    EXPECT_EQ(asmstr(), "sub $0x0002, %ax");
    SUB(addr2, value2);
    EXPECT_EQ(asmstr(), "subw $0x0002, (%rdx)");
    SUB(EAX, value3);
    EXPECT_EQ(asmstr(), "sub $0x00000003, %eax");
    SUB(addr3, value3);
    EXPECT_EQ(asmstr(), "subl $0x00000003, (%rdx)");
    SUB(RAX, value3);
    EXPECT_EQ(asmstr(), "sub $0x00000003, %rax");
    SUB(addr4, value3);
    EXPECT_EQ(asmstr(), "subq $0x00000003, (%rdx)");
    SUB(AX, value1);
    EXPECT_EQ(asmstr(), "sub $0x01, %ax");
    SUB(addr2, value1);
    EXPECT_EQ(asmstr(), "subw $0x01, (%rdx)");
    SUB(EAX, value1);
    EXPECT_EQ(asmstr(), "sub $0x01, %eax");
    SUB(addr3, value1);
    EXPECT_EQ(asmstr(), "subl $0x01, (%rdx)");
    SUB(RAX, value1);
    EXPECT_EQ(asmstr(), "sub $0x01, %rax");
    SUB(addr4, value1);
    EXPECT_EQ(asmstr(), "subq $0x01, (%rdx)");
    SUB(AL, BL);
    EXPECT_EQ(asmstr(), "sub %bl, %al");
    SUB(addr1, BL);
    EXPECT_EQ(asmstr(), "sub %bl, (%rdx)");
    SUB(AX, BX);
    EXPECT_EQ(asmstr(), "sub %bx, %ax");
    SUB(addr2, BX);
    EXPECT_EQ(asmstr(), "sub %bx, (%rdx)");
    SUB(EAX, EBX);
    EXPECT_EQ(asmstr(), "sub %ebx, %eax");
    SUB(addr3, EBX);
    EXPECT_EQ(asmstr(), "sub %ebx, (%rdx)");
    SUB(RAX, RCX);
    EXPECT_EQ(asmstr(), "sub %rcx, %rax");
    SUB(addr4, RCX);
    EXPECT_EQ(asmstr(), "sub %rcx, (%rdx)");
    SUB(AL, addr1);
    EXPECT_EQ(asmstr(), "sub (%rdx), %al");
    SUB(AX, addr2);
    EXPECT_EQ(asmstr(), "sub (%rdx), %ax");
    SUB(EAX, addr3);
    EXPECT_EQ(asmstr(), "sub (%rdx), %eax");
    SUB(RAX, addr4);
    EXPECT_EQ(asmstr(), "sub (%rdx), %rax");

    SBB(AL, value1);
    EXPECT_EQ(asmstr(), "sbb $0x01, %al");
    SBB(addr1, value1);
    EXPECT_EQ(asmstr(), "sbbb $0x01, (%rdx)");
    SBB(AX, value2);
    EXPECT_EQ(asmstr(), "sbb $0x0002, %ax");
    SBB(addr2, value2);
    EXPECT_EQ(asmstr(), "sbbw $0x0002, (%rdx)");
    SBB(EAX, value3);
    EXPECT_EQ(asmstr(), "sbb $0x00000003, %eax");
    SBB(addr3, value3);
    EXPECT_EQ(asmstr(), "sbbl $0x00000003, (%rdx)");
    SBB(RAX, value3);
    EXPECT_EQ(asmstr(), "sbb $0x00000003, %rax");
    SBB(addr4, value3);
    EXPECT_EQ(asmstr(), "sbbq $0x00000003, (%rdx)");
    SBB(AX, value1);
    EXPECT_EQ(asmstr(), "sbb $0x01, %ax");
    SBB(addr2, value1);
    EXPECT_EQ(asmstr(), "sbbw $0x01, (%rdx)");
    SBB(EAX, value1);
    EXPECT_EQ(asmstr(), "sbb $0x01, %eax");
    SBB(addr3, value1);
    EXPECT_EQ(asmstr(), "sbbl $0x01, (%rdx)");
    SBB(RAX, value1);
    EXPECT_EQ(asmstr(), "sbb $0x01, %rax");
    SBB(addr4, value1);
    EXPECT_EQ(asmstr(), "sbbq $0x01, (%rdx)");
    SBB(AL, BL);
    EXPECT_EQ(asmstr(), "sbb %bl, %al");
    SBB(addr1, BL);
    EXPECT_EQ(asmstr(), "sbb %bl, (%rdx)");
    SBB(AX, BX);
    EXPECT_EQ(asmstr(), "sbb %bx, %ax");
    SBB(addr2, BX);
    EXPECT_EQ(asmstr(), "sbb %bx, (%rdx)");
    SBB(EAX, EBX);
    EXPECT_EQ(asmstr(), "sbb %ebx, %eax");
    SBB(addr3, EBX);
    EXPECT_EQ(asmstr(), "sbb %ebx, (%rdx)");
    SBB(RAX, RCX);
    EXPECT_EQ(asmstr(), "sbb %rcx, %rax");
    SBB(addr4, RCX);
    EXPECT_EQ(asmstr(), "sbb %rcx, (%rdx)");
    SBB(AL, addr1);
    EXPECT_EQ(asmstr(), "sbb (%rdx), %al");
    SBB(AX, addr2);
    EXPECT_EQ(asmstr(), "sbb (%rdx), %ax");
    SBB(EAX, addr3);
    EXPECT_EQ(asmstr(), "sbb (%rdx), %eax");
    SBB(RAX, addr4);
    EXPECT_EQ(asmstr(), "sbb (%rdx), %rax");

    CMP(AL, value1);
    EXPECT_EQ(asmstr(), "cmp $0x01, %al");
    CMP(addr1, value1);
    EXPECT_EQ(asmstr(), "cmpb $0x01, (%rdx)");
    CMP(AX, value2);
    EXPECT_EQ(asmstr(), "cmp $0x0002, %ax");
    CMP(addr2, value2);
    EXPECT_EQ(asmstr(), "cmpw $0x0002, (%rdx)");
    CMP(EAX, value3);
    EXPECT_EQ(asmstr(), "cmp $0x00000003, %eax");
    CMP(addr3, value3);
    EXPECT_EQ(asmstr(), "cmpl $0x00000003, (%rdx)");
    CMP(RAX, value3);
    EXPECT_EQ(asmstr(), "cmp $0x00000003, %rax");
    CMP(addr4, value3);
    EXPECT_EQ(asmstr(), "cmpq $0x00000003, (%rdx)");
    CMP(AX, value1);
    EXPECT_EQ(asmstr(), "cmp $0x01, %ax");
    CMP(addr2, value1);
    EXPECT_EQ(asmstr(), "cmpw $0x01, (%rdx)");
    CMP(EAX, value1);
    EXPECT_EQ(asmstr(), "cmp $0x01, %eax");
    CMP(addr3, value1);
    EXPECT_EQ(asmstr(), "cmpl $0x01, (%rdx)");
    CMP(RAX, value1);
    EXPECT_EQ(asmstr(), "cmp $0x01, %rax");
    CMP(addr4, value1);
    EXPECT_EQ(asmstr(), "cmpq $0x01, (%rdx)");
    CMP(AL, BL);
    EXPECT_EQ(asmstr(), "cmp %bl, %al");
    CMP(addr1, BL);
    EXPECT_EQ(asmstr(), "cmp %bl, (%rdx)");
    CMP(AX, BX);
    EXPECT_EQ(asmstr(), "cmp %bx, %ax");
    CMP(addr2, BX);
    EXPECT_EQ(asmstr(), "cmp %bx, (%rdx)");
    CMP(EAX, EBX);
    EXPECT_EQ(asmstr(), "cmp %ebx, %eax");
    CMP(addr3, EBX);
    EXPECT_EQ(asmstr(), "cmp %ebx, (%rdx)");
    CMP(RAX, RCX);
    EXPECT_EQ(asmstr(), "cmp %rcx, %rax");
    CMP(addr4, RCX);
    EXPECT_EQ(asmstr(), "cmp %rcx, (%rdx)");
    CMP(AL, addr1);
    EXPECT_EQ(asmstr(), "cmp (%rdx), %al");
    CMP(AX, addr2);
    EXPECT_EQ(asmstr(), "cmp (%rdx), %ax");
    CMP(EAX, addr3);
    EXPECT_EQ(asmstr(), "cmp (%rdx), %eax");
    CMP(RAX, addr4);
    EXPECT_EQ(asmstr(), "cmp (%rdx), %rax");

    AND(AL, value1);
    EXPECT_EQ(asmstr(), "and $0x01, %al");
    AND(addr1, value1);
    EXPECT_EQ(asmstr(), "andb $0x01, (%rdx)");
    AND(AX, value2);
    EXPECT_EQ(asmstr(), "and $0x0002, %ax");
    AND(addr2, value2);
    EXPECT_EQ(asmstr(), "andw $0x0002, (%rdx)");
    AND(EAX, value3);
    EXPECT_EQ(asmstr(), "and $0x00000003, %eax");
    AND(addr3, value3);
    EXPECT_EQ(asmstr(), "andl $0x00000003, (%rdx)");
    AND(RAX, value3);
    EXPECT_EQ(asmstr(), "and $0x00000003, %rax");
    AND(addr4, value3);
    EXPECT_EQ(asmstr(), "andq $0x00000003, (%rdx)");
    AND(AX, value1);
    EXPECT_EQ(asmstr(), "and $0x01, %ax");
    AND(addr2, value1);
    EXPECT_EQ(asmstr(), "andw $0x01, (%rdx)");
    AND(EAX, value1);
    EXPECT_EQ(asmstr(), "and $0x01, %eax");
    AND(addr3, value1);
    EXPECT_EQ(asmstr(), "andl $0x01, (%rdx)");
    AND(RAX, value1);
    EXPECT_EQ(asmstr(), "and $0x01, %rax");
    AND(addr4, value1);
    EXPECT_EQ(asmstr(), "andq $0x01, (%rdx)");
    AND(AL, BL);
    EXPECT_EQ(asmstr(), "and %bl, %al");
    AND(addr1, BL);
    EXPECT_EQ(asmstr(), "and %bl, (%rdx)");
    AND(AX, BX);
    EXPECT_EQ(asmstr(), "and %bx, %ax");
    AND(addr2, BX);
    EXPECT_EQ(asmstr(), "and %bx, (%rdx)");
    AND(EAX, EBX);
    EXPECT_EQ(asmstr(), "and %ebx, %eax");
    AND(addr3, EBX);
    EXPECT_EQ(asmstr(), "and %ebx, (%rdx)");
    AND(RAX, RCX);
    EXPECT_EQ(asmstr(), "and %rcx, %rax");
    AND(addr4, RCX);
    EXPECT_EQ(asmstr(), "and %rcx, (%rdx)");
    AND(AL, addr1);
    EXPECT_EQ(asmstr(), "and (%rdx), %al");
    AND(AX, addr2);
    EXPECT_EQ(asmstr(), "and (%rdx), %ax");
    AND(EAX, addr3);
    EXPECT_EQ(asmstr(), "and (%rdx), %eax");
    AND(RAX, addr4);
    EXPECT_EQ(asmstr(), "and (%rdx), %rax");

    OR(AL, value1);
    EXPECT_EQ(asmstr(), "or $0x01, %al");
    OR(addr1, value1);
    EXPECT_EQ(asmstr(), "orb $0x01, (%rdx)");
    OR(AX, value2);
    EXPECT_EQ(asmstr(), "or $0x0002, %ax");
    OR(addr2, value2);
    EXPECT_EQ(asmstr(), "orw $0x0002, (%rdx)");
    OR(EAX, value3);
    EXPECT_EQ(asmstr(), "or $0x00000003, %eax");
    OR(addr3, value3);
    EXPECT_EQ(asmstr(), "orl $0x00000003, (%rdx)");
    OR(RAX, value3);
    EXPECT_EQ(asmstr(), "or $0x00000003, %rax");
    OR(addr4, value3);
    EXPECT_EQ(asmstr(), "orq $0x00000003, (%rdx)");
    OR(AX, value1);
    EXPECT_EQ(asmstr(), "or $0x01, %ax");
    OR(addr2, value1);
    EXPECT_EQ(asmstr(), "orw $0x01, (%rdx)");
    OR(EAX, value1);
    EXPECT_EQ(asmstr(), "or $0x01, %eax");
    OR(addr3, value1);
    EXPECT_EQ(asmstr(), "orl $0x01, (%rdx)");
    OR(RAX, value1);
    EXPECT_EQ(asmstr(), "or $0x01, %rax");
    OR(addr4, value1);
    EXPECT_EQ(asmstr(), "orq $0x01, (%rdx)");
    OR(AL, BL);
    EXPECT_EQ(asmstr(), "or %bl, %al");
    OR(addr1, BL);
    EXPECT_EQ(asmstr(), "or %bl, (%rdx)");
    OR(AX, BX);
    EXPECT_EQ(asmstr(), "or %bx, %ax");
    OR(addr2, BX);
    EXPECT_EQ(asmstr(), "or %bx, (%rdx)");
    OR(EAX, EBX);
    EXPECT_EQ(asmstr(), "or %ebx, %eax");
    OR(addr3, EBX);
    EXPECT_EQ(asmstr(), "or %ebx, (%rdx)");
    OR(RAX, RCX);
    EXPECT_EQ(asmstr(), "or %rcx, %rax");
    OR(addr4, RCX);
    EXPECT_EQ(asmstr(), "or %rcx, (%rdx)");
    OR(AL, addr1);
    EXPECT_EQ(asmstr(), "or (%rdx), %al");
    OR(AX, addr2);
    EXPECT_EQ(asmstr(), "or (%rdx), %ax");
    OR(EAX, addr3);
    EXPECT_EQ(asmstr(), "or (%rdx), %eax");
    OR(RAX, addr4);
    EXPECT_EQ(asmstr(), "or (%rdx), %rax");

    XOR(AL, value1);
    EXPECT_EQ(asmstr(), "xor $0x01, %al");
    XOR(addr1, value1);
    EXPECT_EQ(asmstr(), "xorb $0x01, (%rdx)");
    XOR(AX, value2);
    EXPECT_EQ(asmstr(), "xor $0x0002, %ax");
    XOR(addr2, value2);
    EXPECT_EQ(asmstr(), "xorw $0x0002, (%rdx)");
    XOR(EAX, value3);
    EXPECT_EQ(asmstr(), "xor $0x00000003, %eax");
    XOR(addr3, value3);
    EXPECT_EQ(asmstr(), "xorl $0x00000003, (%rdx)");
    XOR(RAX, value3);
    EXPECT_EQ(asmstr(), "xor $0x00000003, %rax");
    XOR(addr4, value3);
    EXPECT_EQ(asmstr(), "xorq $0x00000003, (%rdx)");
    XOR(AX, value1);
    EXPECT_EQ(asmstr(), "xor $0x01, %ax");
    XOR(addr2, value1);
    EXPECT_EQ(asmstr(), "xorw $0x01, (%rdx)");
    XOR(EAX, value1);
    EXPECT_EQ(asmstr(), "xor $0x01, %eax");
    XOR(addr3, value1);
    EXPECT_EQ(asmstr(), "xorl $0x01, (%rdx)");
    XOR(RAX, value1);
    EXPECT_EQ(asmstr(), "xor $0x01, %rax");
    XOR(addr4, value1);
    EXPECT_EQ(asmstr(), "xorq $0x01, (%rdx)");
    XOR(AL, BL);
    EXPECT_EQ(asmstr(), "xor %bl, %al");
    XOR(addr1, BL);
    EXPECT_EQ(asmstr(), "xor %bl, (%rdx)");
    XOR(AX, BX);
    EXPECT_EQ(asmstr(), "xor %bx, %ax");
    XOR(addr2, BX);
    EXPECT_EQ(asmstr(), "xor %bx, (%rdx)");
    XOR(EAX, EBX);
    EXPECT_EQ(asmstr(), "xor %ebx, %eax");
    XOR(addr3, EBX);
    EXPECT_EQ(asmstr(), "xor %ebx, (%rdx)");
    XOR(RAX, RCX);
    EXPECT_EQ(asmstr(), "xor %rcx, %rax");
    XOR(addr4, RCX);
    EXPECT_EQ(asmstr(), "xor %rcx, (%rdx)");
    XOR(AL, addr1);
    EXPECT_EQ(asmstr(), "xor (%rdx), %al");
    XOR(AX, addr2);
    EXPECT_EQ(asmstr(), "xor (%rdx), %ax");
    XOR(EAX, addr3);
    EXPECT_EQ(asmstr(), "xor (%rdx), %eax");
    XOR(RAX, addr4);
    EXPECT_EQ(asmstr(), "xor (%rdx), %rax");
}
